**********************webpack********************************************
i. npm init
配置项
2.新建webpack.config.js
3.安装webpack ――――npm i webpack --save-dev
4.安装react ――――― npm i react --save
5. npm i react-dom --save
6.配置webpack.config (说明--save 开发完成后项目运行还依赖的，列如：react 。--save-dev开发时候依赖的，列如：babel)
7.install babel ----npm install babel-core babel-loader babel-preset-es2015 babel-preset-react --save-dev
8.install css转义  ----npm i extract-text-webpack-plugin
8.1 安装  转义sass  ---- npm i node-sass --save-dev
8.2 安装 ----npm i sass-loader css-loader style-loader  --save-dev
9. 安装 html-webpack-plugin  ----   npm i html-webpack-plugin --save-dev
10.1 创建webpack的sever ---- webpack.config.dev.js
10.2 配置开发环境配置sever npm下载---- npm i webpack-merge --save-dev
10.3 配置开发服务器文件 ----webpack.config.dev.js
10.4 安装开发服务器 ----npm i webpack-dev-server --save-dev
10.5 启动服务器 ------npm run dev
10.6 在个模块.js中 import需要使用模块
10.7 在index.js中使用各模块

//git 下载https://git-scm.com/download/win
使用 git。exe
进入项目所在目录
git clone https://github.com/FearlessMa/React-project.git

进入git仓库 存储文件夹 cd 文件夹名称
********************************git*********************************************************
当前文件目录 pwd
目录结构    ls-al
创建文件夹  mkdir
返回上一级  cd ..
git init
git add .
git commit -m '说明'
没有登录会登录 填写邮箱 名字
git push origin master
pull下载到本地服务器

新项目创建步骤
进入项目目录
1. git init
2. git add .
3. git commit -m '注释'
4. git remote add origin https://新项目git地址
5. git pull origin master
6. git push origin master

//删除文件夹下的所有 .git 文件
    find . -name ".git" | xargs rm -Rf



****************************************************************************************
CSS
安装cssloader----npm i css-loader style-loader --save-dev
引用前使用 style-loader!css-loader！xxx/xxx/xx.css
命令行执行loader css文件并且改变后自动打包文件 安装 webpack xxx.js xxxx.js --module-bind 'css=style-loader!css-loader' --watch
*****命令末尾追加*****************************
打包进度 --progress
打包的模块 --display-modules
显示原因  --display-reasons
彩色     --color


**********************************webpack.json*************************
"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    //  自定义webpack命令
    "dev": "webpack-dev-server --config webpack.config.dev.js"
  }
***************************webpack.config.js**************************************
const HtmlWebpackPlugin = require('html-webpack-plugin');//引入插件
module.exports = {
    //多页面应用入口可以需要给entry传对象   //文件打包入口--/app/index.js //传入字符串或数组为单入口 ，对象为多入口
    entry:{
        page1:'string1'
        page2:'string2'
    },
    output: {
        //文件打包后输出路径
        path: path.join(__dirname, 'dist'),
        //文件打包后名称 [name]是entry对象的属性名 [hash]每次是打包时的hash值 [chunkhash]是打包文件后hash值，只有文件有修改打包后才会改变
        filename: "js/[name]-[hash].js"
      }, // js/nav.js


    plugins: [
       new HtmlWebpackPlugin({
          //模板路径
          filename: 'index.html',
          template: 'index.html',
          //script  标签生成位置
          inject:'head',
          //title对应的描述 HTML中引用 <title><%= htmlWebpackPlugin.option.title %></title>
          title:'this is title'
          /*htmlWebpackPlugin对象可以便利
          HTML文件中可以遍历模板
                <body>
                  <% for (var key in htmlWebpackPlugin){%>
                    <% key %>
                  <%}%>
                  <% for (var key in htmlWebpackPlugin.files){%>
                    <% key %> : <% JSON.stringify(htmlWebpackPlugin.files[key]) %>
                  <%}%>

                  <% for (var key in htmlWebpackPlugin.options){%>
                    <% key %> : <% htmlWebpackPlugin.options[key] %>
                  <%}%>


                <div id="app"></div>
                </body>

          */
       }),
        extractSass
      ]
}
******************webpack.config多页面应用**************************
module.exports = {
    //多页面应用入口可以需要给entry传对象   //文件打包入口--/app/index.js //传入字符串或数组为单入口 ，对象为多入口
    entry:{
        main:'main.js',
        a:'a.js',
        b:'b.js',
        c:'c.js'
    },
      plugins: [
           new HtmlWebpackPlugin({
              //生成的文件名
              filename: 'a.html',
              //引用的模板
              template: 'index.html',
              //trunks是对应的entry里js 数组值为entry对象的key
              trunks:['main','a']
              //excludeTrunks:['b','c']//排除bc
           }),
           new HtmlWebpackPlugin({
             //模板路径
             filename: 'b.html',
             template: 'index1.html',
             trunks:['main','b']
          }),
           new HtmlWebpackPlugin({
             //模板路径
             filename: 'c.html',
             template: 'index1.html',
             trunks:['main','c']
          }),
           extractSass
      ]
}


/*********************************处理图片***************************************************/
loader处理顺序从右到左开始
 npm i file-loader --save-dev
{
    test:/\.(jpg|png|svg|gif)$/i,
    loader:file-loader,
    query:{
        name:'img/[name]-[hash:5].[ext]'
    }
}
 npm i url-loader --save-dev
{
    test:/\.(jpg|png|svg|gif)$/i,
    loader:url-loader,
    query:{
        //20000字节
        limit:20000,
        name:'img/[name]-[hash:5].[ext]'
    }
}

 npm i image-webpack-loader --save-dev

{
    test:/\.(jpg|png|svg|gif)$/i,
    loaders:['url-loader?limit=20000&name:img/[name]-[hash:5].[ext]',
        'image-webpack'
    ]
}




